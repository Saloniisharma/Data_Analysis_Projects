-- We are creating a duplicate tables so the changes will be made here, and not in the Raw Table.

CREATE TABLE `layoffs_staging_2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num` INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

SELECT *
FROM layoffs_staging_2;

-- Deleting Duplicates by Using Common Table Expressions and Window Functions Together and Asigning Row Number to the rows
-- If Rows will be Duplicate Then Row Number will be 2, and 1 will be assigned for unique row

INSERT INTO layoffs_staging_2
SELECT *,
ROW_NUMBER() OVER(PARTITION BY company,location,industry,
total_laid_off,percentage_laid_off,date,stage,country,funds_raised_millions) AS row_num
FROM layoffs_staging;

DELETE
FROM layoffs_staging_2
WHERE row_num > 1;

SELECT *
FROM layoffs_staging_2;

-- standardizing data
-- 1) Column "company" Standardization

SELECT company,TRIM(company)
FROM layoffs_staging_2;

UPDATE layoffs_staging_2
SET company = TRIM(company);

-- 2) Column "industry" Standardization

SELECT DISTINCT industry
FROM layoffs_staging_2
ORDER BY 1;

UPDATE layoffs_staging_2
SET industry = 'Crypto'
WHERE industry LIKE 'Crypto%';

SELECT * 
FROM layoffs_staging_2
WHERE industry='Crypto';

SELECT DISTINCT location
FROM layoffs_staging_2
order by 1;

-- 1) Column "country" Standardization

SELECT DISTINCT country
FROM layoffs_staging_2
order by 1;

SELECT DISTINCT country, TRIM(TRAILING '.' FROM country)
FROM layoffs_staging_2
order by 1;

UPDATE layoffs_staging_2
SET country = TRIM(TRAILING '.' FROM country)
WHERE country LIKE 'United States%';

-- Changing Data Type of "date" column

SELECT `date`,
STR_TO_DATE(`date`,'%m/%d/%Y')
FROM layoffs_staging_2;

UPDATE layoffs_staging_2
SET `date` = STR_TO_DATE(`date`,'%m/%d/%Y');

ALTER TABLE layoffs_staging_2
MODIFY COLUMN `date` DATE;

-- delete nulls and blanks

SELECT *
from layoffs_staging_2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

SELECT *
from layoffs_staging_2
WHERE industry IS NULL
OR industry = '';

-- we gonna try to populate these

SELECT * 
FROM layoffs_staging_2
WHERE company = 'Airbnb';

UPDATE layoffs_staging_2
SET industry = null
WHERE industry = '';

SELECT *
FROM layoffs_staging_2 t1
JOIN layoffs_staging_2 t2
  ON t1.company = t2.company
 AND t1.location = t2.location
WHERE t1.industry IS NULL
AND t2.industry IS NOT NULL;

SELECT t1.industry, t2.industry
FROM layoffs_staging_2 t1
JOIN layoffs_staging_2 t2
  ON t1.company = t2.company
 AND t1.location = t2.location
WHERE t1.industry IS NULL 
AND t2.industry IS NOT NULL;

UPDATE layoffs_staging_2 t1
JOIN layoffs_staging_2 t2
  ON t1.company = t2.company
SET t1.industry = t2.industry
WHERE t1.industry IS NULL 
AND t2.industry IS NOT NULL;

SELECT * 
FROM layoffs_staging_2
WHERE company LIKE 'Bally%';

SELECT *
from layoffs_staging_2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

DELETE
from layoffs_staging_2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

ALTER TABLE layoffs_staging_2
DROP COLUMN row_num;

SELECT *
from layoffs_staging_2;

-- exploratary analysis

SELECT MAX(total_laid_off),MAX(percentage_laid_off)
FROM layoffs_staging_2;

SELECT *
FROM layoffs_staging_2
WHERE percentage_laid_off = 1
ORDER BY funds_raised_millions DESC;

SELECT company, SUM(total_laid_off)
FROM layoffs_staging_2
GROUP BY company
ORDER BY 2 DESC;

SELECT MIN(`date`),MAX(`date`)
FROM layoffs_staging_2;

SELECT industry, SUM(total_laid_off)
FROM layoffs_staging_2
GROUP BY industry
ORDER BY 2 DESC;

SELECT country, SUM(total_laid_off)
FROM layoffs_staging_2
GROUP BY country
ORDER BY 2 DESC;

SELECT date, SUM(total_laid_off)
FROM layoffs_staging_2
GROUP BY date
ORDER BY 1 DESC;

SELECT YEAR(`date`), SUM(total_laid_off)
FROM layoffs_staging_2
GROUP BY YEAR(`date`)
ORDER BY 1 DESC;

SELECT stage, SUM(total_laid_off)
FROM layoffs_staging_2
GROUP BY stage
ORDER BY 2 DESC;

SELECT SUBSTRING(`date`,1,7) AS `MONTH`, SUM(total_laid_off)
FROM layoffs_staging_2
WHERE SUBSTRING(`date`,1,7) IS NOT NULL
GROUP BY `MONTH`
ORDER BY 1;

WITH rolling_total AS
(
SELECT SUBSTRING(`date`,1,7) AS `MONTH`, SUM(total_laid_off) AS total_off
FROM layoffs_staging_2
WHERE SUBSTRING(`date`,1,7) IS NOT NULL
GROUP BY `MONTH`
ORDER BY 1
)
SELECT `MONTH`,total_off, SUM(total_off) OVER(ORDER BY `MONTH`) AS Rolling_to
FROM rolling_total;

SELECT company,YEAR(`date`),SUM(total_laid_off)
FROM layoffs_staging_2
GROUP BY company,YEAR(`date`)
ORDER BY 3 DESC;

WITH company_year(company,year,total_laid_off) AS 
(
SELECT company,YEAR(`date`),SUM(total_laid_off)
FROM layoffs_staging_2
GROUP BY company,YEAR(`date`)
), company_year_rank AS
(
SELECT *,
DENSE_RANK() OVER(PARTITION BY year order by total_laid_off DESC) AS ranking
FROM company_year
WHERE year IS NOT NULL
)
SELECT *
FROM company_year_rank
WHERE ranking <= 5;


